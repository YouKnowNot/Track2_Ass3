l <- data.frame("Hospital name"=character() , "State"=character(), "OC"=numeric())
#retrieve the rank for rach state
for(i in 1:length(spl)){
if(is.numeric(num)){
k <- as.numeric(num) }
if(num == "best"){
k <- 1 }
else{
k <- nrow(spl[[i]]) }
aux <-spl[i]
aux <- data.frame(aux)
aux<- aux[order(aux[,2], xtfrm(aux[,1])),]
colnames(aux) <- c("Hospital name", "State", "OC")
if(is.na(aux[k,3])){
Hospital_name <- NA
State <- names(spl[i])
OC <- NA
au <- data.frame(Hospital_name, State, OC)
colnames(au) <- c("Hospital name", "State", "OC")
l <- rbind(l,au)
}
else{
l <- rbind(l,aux[k,])
}
}
l
}
source("best.R")
source("rankall.R")
source("rankhospital.R")
r <- rankall("heart failure", 10)
r
evaluate_rankall <- function(x= data.frame, num){
# Remove NA's
f <- complete.cases(x)
x <- x[f,]
#split by state
spl <- split(x, x$State)
#create a data frame to hold th results
l <- data.frame("Hospital name"=character() , "State"=character(), "OC"=numeric())
#retrieve the rank for rach state
for(i in 1:length(spl)){
if(is.numeric(num)){
k <- as.numeric(num) }
if(num == "best"){
k <- 1 }
else{
k <- nrow(spl[[i]]) }
aux <-spl[i]
aux <- data.frame(aux)
aux<- aux[order(aux[,2], xtfrm(aux[,1])),]
colnames(aux) <- c("Hospital name", "State", "OC")
if(is.na(aux[k,3])){
Hospital_name <- NA
State <- names(spl[i])
OC <- NA
au <- data.frame(Hospital_name, State, OC)
colnames(au) <- c("Hospital name", "State", "OC")
l <- rbind(l,au)
}
else{
l <- rbind(l,aux[k,])
}
}
l
}
source("best.R")
source("rankall.R")
source("rankhospital.R")
r <- rankall("heart failure", 10)
r
evaluate_rankall <- function(x= data.frame, num){
# Remove NA's
f <- complete.cases(x)
x <- x[f,]
#split by state
spl <- split(x, x$State)
#create a data frame to hold th results
l <- data.frame("Hospital name"=character() , "State"=character(), "OC"=numeric())
#retrieve the rank for rach state
for(i in 1:length(spl)){
if(is.numeric(num)){
k <- as.numeric(num) }
if(num == "best"){
k <- 1 }
else{
k <- nrow(spl[[i]]) }
aux <-spl[i]
aux <- data.frame(aux)
aux<- aux[order(-aux[,2], xtfrm(aux[,1])),]
colnames(aux) <- c("Hospital name", "State", "OC")
if(is.na(aux[k,3])){
Hospital_name <- NA
State <- names(spl[i])
OC <- NA
au <- data.frame(Hospital_name, State, OC)
colnames(au) <- c("Hospital name", "State", "OC")
l <- rbind(l,au)
}
else{
l <- rbind(l,aux[k,])
}
}
l
}
evaluate_rankall <- function(x= data.frame, num){
# Remove NA's
f <- complete.cases(x)
x <- x[f,]
#split by state
spl <- split(x, x$State)
#create a data frame to hold th results
l <- data.frame("Hospital name"=character() , "State"=character(), "OC"=numeric())
#retrieve the rank for rach state
for(i in 1:length(spl)){
if(is.numeric(num)){
k <- as.numeric(num) }
if(num == "best"){
k <- 1 }
else{
k <- nrow(spl[[i]]) }
aux <-spl[i]
aux <- data.frame(aux)
aux<- aux[order(-aux[,2], xtfrm(aux[,1])),]
colnames(aux) <- c("Hospital name", "State", "OC")
if(is.na(aux[k,3])){
Hospital_name <- NA
State <- names(spl[i])
OC <- NA
au <- data.frame(Hospital_name, State, OC)
colnames(au) <- c("Hospital name", "State", "OC")
l <- rbind(l,au)
}
else{
l <- rbind(l,aux[k,])
}
}
l
}
source("best.R")
source("rankall.R")
source("rankhospital.R")
r <- rankall("heart failure", 10)
?order
evaluate_rankall <- function(x= data.frame, num){
# Remove NA's
f <- complete.cases(x)
x <- x[f,]
#split by state
spl <- split(x, x$State)
#create a data frame to hold th results
l <- data.frame("Hospital name"=character() , "State"=character(), "OC"=numeric())
#retrieve the rank for rach state
for(i in 1:length(spl)){
if(is.numeric(num)){
k <- as.numeric(num) }
if(num == "best"){
k <- 1 }
else{
k <- nrow(spl[[i]]) }
aux <-spl[i]
aux <- data.frame(aux)
aux<- aux[order(aux[,2], xtfrm(aux[,1])),]
colnames(aux) <- c("Hospital name", "State", "OC")
if(is.na(aux[k,3])){
Hospital_name <- NA
State <- names(spl[i])
OC <- NA
au <- data.frame(Hospital_name, State, OC)
colnames(au) <- c("Hospital name", "State", "OC")
l <- rbind(l,au)
}
else{
l <- rbind(l,aux[k,])
}
}
l
}
source("best.R")
source("rankall.R")
source("rankhospital.R")
r <- rankall("heart failure", 10)
r
evaluate_rankall <- function(x= data.frame, num){
# Remove NA's
f <- complete.cases(x)
x <- x[f,]
#split by state
spl <- split(x, x$State)
#create a data frame to hold th results
l <- data.frame("Hospital name"=character() , "State"=character(), "OC"=numeric())
#retrieve the rank for rach state
for(i in 1:length(spl)){
if(is.numeric(num)){
k <- as.numeric(num) }
if(num == "best"){
k <- 1 }
else{
k <- nrow(spl[[i]]) }
aux <-spl[i]
aux <- data.frame(aux)
aux<- aux[order(aux[,2], xtfrm(aux[,1]), descending=F),]
colnames(aux) <- c("Hospital name", "State", "OC")
if(is.na(aux[k,3])){
Hospital_name <- NA
State <- names(spl[i])
OC <- NA
au <- data.frame(Hospital_name, State, OC)
colnames(au) <- c("Hospital name", "State", "OC")
l <- rbind(l,au)
}
else{
l <- rbind(l,aux[k,])
}
}
l
}
source("best.R")
source("rankall.R")
source("rankhospital.R")
### Finding the hspital by a specified rank in the state
# Takes three arguments. 1: outcome type (e.g. hear attack) COL #11, 17, 23
#                        2: specified rank (char or num)
# Returns a dataframe with 2 columns: 1: name of the hospital with the specified rank
#                                     2: rate of the outcome
rankall <- function(outcome, num ) {
#uniform the input format to lower case (allow case flexibility)
outcome <- tolower(outcome)
#Read the data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## check if the number and outcome are valid
st <- dat[,7]
st <- unique(st)
ou <- c("heart attack", "heart failure", "pneumonia")
if(!(outcome %in% ou)){
stop("invalid outcome")
}
## Read outcome data with relevant columns
mort <- dat[,c(2,7,11,17,23)]
#transform relevant columns to numeric
cols <- c(3,4,5)
mort[,cols]<- lapply(mort[,cols], as.numeric)
# set col names to easy to read names
colnames(mort) <- c("Hospital Name","State", "Heart Attack Rate", "Heart Failure Rate", "Pneumonia")
source("evaluate_rankall.R")
# Switch to check which outcome to generate
if(outcome=="heart attack"){
ha <- mort[,c(1,2,3)]
ha<- ha[order(ha$`Heart Attack Rate`, xtfrm(ha[,1])),]
}
if(outcome=="heart failure"){
ha <- mort[,c(1,2,4)]
ha<- ha[order(ha$'Heart Failure Rate', xtfrm(ha[,1])),]
}
if(outcome=="pneumonia"){
ha <- mort[,c(1,2,5)]
ha<- ha[order(ha$Pneumonia, xtfrm(ha[,1])),]
}
res<-evaluate_rankall(ha, num)
}
source("best.R")
source("rankall.R")
source("rankhospital.R")
r <- rankall("heart failure", 10)
### Finding the hspital by a specified rank in the state
# Takes three arguments. 1: outcome type (e.g. hear attack) COL #11, 17, 23
#                        2: specified rank (char or num)
# Returns a dataframe with 2 columns: 1: name of the hospital with the specified rank
#                                     2: rate of the outcome
rankall <- function(outcome, num ) {
#uniform the input format to lower case (allow case flexibility)
outcome <- tolower(outcome)
#Read the data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## check if the number and outcome are valid
st <- dat[,7]
st <- unique(st)
ou <- c("heart attack", "heart failure", "pneumonia")
if(!(outcome %in% ou)){
stop("invalid outcome")
}
## Read outcome data with relevant columns
mort <- dat[,c(2,7,11,17,23)]
#transform relevant columns to numeric
cols <- c(3,4,5)
mort[,cols]<- lapply(mort[,cols], as.numeric)
# set col names to easy to read names
colnames(mort) <- c("Hospital Name","State", "Heart Attack Rate", "Heart Failure Rate", "Pneumonia")
source("evaluate_rankall.R")
# Switch to check which outcome to generate
if(outcome=="heart attack"){
ha <- mort[,c(1,2,3)]
ha<- ha[order(ha$`Heart Attack Rate`, ha[,1]),]
}
if(outcome=="heart failure"){
ha <- mort[,c(1,2,4)]
ha<- ha[order(ha$'Heart Failure Rate', ha[,1]),]
}
if(outcome=="pneumonia"){
ha <- mort[,c(1,2,5)]
ha<- ha[order(ha$Pneumonia, ha[,1]),]
}
res<-evaluate_rankall(ha, num)
}
source("best.R")
source("rankall.R")
source("rankhospital.R")
r <- rankall("heart failure", 10)
r
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
mort <- dat[,c(2,7,11,17,23)]
mort[,cols]<- lapply(mort[,cols], as.numeric)
colnames(mort) <- c("Hospital Name","State", "Heart Attack Rate", "Heart Failure Rate", "Pneumonia")
ha <- mort[,c(1,2,5)]
ha<- ha[order(ha$Pneumonia, xtfrm(ha[,1])),]
f <- complete.cases(ha)
x <- ha[f,]
spl <- split(x, x$State)
num="worst"
for(i in 1:length(spl)){
if(is.numeric(num)){
num <- as.numeric(num) }
if(num == "best"){
num <- 1 }
if(num == "worst"){
num <- nrow(spl[[i]])
print(num)}
}
aux <-spl[1]
aux <- data.frame(aux)
aux
aux["TX"]
aux[["TX"]
]
aux[2]
aux[2,]
aux <- spl[["NV"]]
aux
aux <- spl[["TX"]]
aux
str(ha)
source("best.R")
source("rankall.R")
source("rankhospital.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, r$State == "HI")$hospital)
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
mort <- dat[,c(2,7,11,17,23)]
mort[,cols]<- lapply(mort[,cols], as.numeric)
colnames(mort) <- c("Hospital Name","State", "Heart Attack Rate", "Heart Failure Rate", "Pneumonia")
ha <- mort[,c(1,2,5)]
ha<- ha[order(ha$Pneumonia, ha[,1]),]
f <- complete.cases(ha)
x <- ha[f,]
spl <- split(x, x$State)
num="worst"
for(i in 1:length(spl)){
if(is.numeric(num)){
num <- as.numeric(num) }
if(num == "best"){
num <- 1 }
if(num == "worst"){
num <- nrow(spl[[i]])
print(num)}
}
aux <-spl[1]
aux <- data.frame(aux)
r <- rankall("heart failure", 10)
r
evaluate_rankall <- function(x= data.frame, num){
# Remove NA's
f <- complete.cases(x)
x <- x[f,]
#split by state
spl <- split(x, x$State)
#create a data frame to hold th results
l <- data.frame("Hospital name"=character() , "State"=character(), "OC"=numeric())
#retrieve the rank for rach state
for(i in 1:length(spl)){
if(is.numeric(num)){
k <- as.numeric(num)
print("im in num")}
if(num == "best"){
k <- 1
print("im in best")}
else{
k <- nrow(spl[[i]])
print("im in worst")}
aux <-spl[i]
aux <- data.frame(aux)
colnames(aux) <- c("Hospital name", "State", "OC")
if(is.na(aux[k,3])){
Hospital_name <- NA
State <- names(spl[i])
OC <- NA
au <- data.frame(Hospital_name, State, OC)
colnames(au) <- c("Hospital name", "State", "OC")
l <- rbind(l,au)
}
else{
l <- rbind(l,aux[k,])
}
}
l
}
source("best.R")
source("rankall.R")
source("rankhospital.R")
r <- rankall("heart failure", 10)
evaluate_rankall <- function(x= data.frame, num){
# Remove NA's
f <- complete.cases(x)
x <- x[f,]
#split by state
spl <- split(x, x$State)
#create a data frame to hold th results
l <- data.frame("Hospital name"=character() , "State"=character(), "OC"=numeric())
#retrieve the rank for rach state
for(i in 1:length(spl)){
if(is.numeric(num)){
k <- as.numeric(num)
print("im in num")}
if(num == "best"){
k <- 1
print("im in best")}
if(num=="worst"){
k <- nrow(spl[[i]])
print("im in worst")}
aux <-spl[i]
aux <- data.frame(aux)
colnames(aux) <- c("Hospital name", "State", "OC")
if(is.na(aux[k,3])){
Hospital_name <- NA
State <- names(spl[i])
OC <- NA
au <- data.frame(Hospital_name, State, OC)
colnames(au) <- c("Hospital name", "State", "OC")
l <- rbind(l,au)
}
else{
l <- rbind(l,aux[k,])
}
}
l
}
source("best.R")
source("rankall.R")
source("rankhospital.R")
r <- rankall("heart failure", 10)
r
load(XML)
install.packages("XML")
library(XML)
fileUrl <- "http://ww.w3schools.com/xml/simple.xml"
fileUrl
doc <- xmlTreeParse(fileUrl)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl)
doc <- xmlTreeParse(fileUrl, useInternalNodes = T)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal = T)
?xmlTreeParse
doc <- xmlTreeParse(fileUrl,iURL = T)
doc <- xmlTreeParse(fileUrl,isURL = T)
doc <- xmlTreeParse(fileUrl,isURL = T, useInternalNodes = T)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
open(fileUrl)
open.connection(fileUrl)
fileUrl
fileUrl <- "http://www.sherdog.com/"
doc <- xmlTreeParse(fileUrl,isURL = T, useInternalNodes = T)
doc <- xmlTreeParse(fileUrl,isURL = T, useInternalNodes = T)
doc
doc <- xmlTreeParse(fileUrl,isURL = T, useInternalNodes = F)
doc
fileUrl <- "http://www.espn.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- xmlTreeParse(fileUrl,isURL = T, useInternalNodes = T)
doc
doc <- xmlTreeParse(fileUrl,isURL = T)
doc <- htmlTreeParse(fileUrl,isURL = T)
doc
scores <- xpathSApply(doc, "//li[@class='score]", xmlValue)
scores <- xpathSApply(doc, "//li[@class='score]", xmlValue)
doc <- htmlTreeParse(fileUrl,isURL = T, useInternalNodes = T)
scores <- xpathSApply(doc, "//li[@class='score]", xmlValue)
scores <- xpathSApply(doc, "//li[@class='sub']", xmlValue)
scores
doc <- htmlTreeParse(fileUrl,isURL = T)
scores <- xpathSApply(doc, "//li[@class='score]", xmlValue)
scores <- xpathSApply(doc, "//li[@class='sub']", xmlValue)
doc <- htmlTreeParse(fileUrl,isURL = T, useInternalNodes = T)
scores <- xpathSApply(doc, "//li[@class='sub']", xmlValue)
scores
doc <- htmlTreeParse(fileUrl,isURL = T, useInternalNodes = F)
scores <- xpathSApply(doc, "//li[@class='sub']", xmlValue)
doc <- htmlTreeParse(fileUrl,isURL = T, useInternalNodes = T)
scores <- xpathSApply(doc, "//li[@class='sub']", xmlValue)
doc <- htmlTreeParse(fileUrl,isURL = T, useInternal = T)
scores <- xpathSApply(doc, "//li[@class='sub']", xmlValue)
scores
fileUrl
